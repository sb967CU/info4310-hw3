<!DOCTYPE html>

<head>

  <title>INFO4310 HW3 Interactive Yelp Visualization</title>
  <meta charset="utf-8" />
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v6.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>

  <style>
    body {
      background-color: #e8e3df;
    }

    h1 {
      text-align: center;

    }

    h1,
    h2,
    p,
    span {
      font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
      color: #891717;
    }

    span,
    .desc p {
      line-height: 25px;
      font-size: 17px;
    }

    #contain {
      display: flex;
      justify-content: center;
    }

    #side {
      display: flex;
      flex-direction: column;
      margin-left: 45px;
      width: 350px;
    }

    .filters {
      display: flex;
      flex-direction: column;
    }

    .row {
      display: flex;
    }

    .row span {
      margin: 4.5px 0px;
    }

    .col {
      display: flex;
      flex-direction: column;
      flex: 1;
    }

    button {
      margin: 5px;
      font-size: 18px;
      border-radius: 8px;
      padding: 10px;
    }

    #filterbutton {
      margin-top: 25px;
      border: none;
      background-color: #982121;
      color: #ffff;
    }

    #filterbutton:hover {
      background-color: #dd3939;
      cursor: pointer;
    }

    #clearbutton {
      color: #891717;
      border: 3px #982121 solid;
      background-color: #ffff;
    }

    #clearbutton:hover {
      background-color: #eaeaea;
      cursor: pointer;
    }

    #button {
      margin-top: -20px;
      margin-left: 40px;
    }

    .neighborhood {
      fill: #ccd7d8;
      stroke: #fae6b1;
      stroke-width: 1px;
    }

    rect.handle {
      display: none;
    }

    rect.overlay {
      display: none;
    }

    .txts {
      font-family: Arial, sans-serif;
    }
  </style>

</head>

<body>

  <h1>Find Your Next Favorite Restaurant in Pittsburgh, PA!</h1>

  <div id="contain">

    <svg width="1200" height="900">
      <g id="map" width="1200" height="900"></g>
      <g id="minim" width="280" height="280" transform="translate(900,1)">
        <rect x="0" y="0" width="280" height="280" stroke="darkgrey" fill="white" opacity="1" />
      </g>
    </svg>

    <div id="side">
      <div class="desc">
        <p>
          Welcome to Pittsburgh!
          Discover new restaurants with cuisine you're craving or from a local neighbourhood.
          Feel free to zoom in and take a closer look on the map at specific locations. The world is your oyster!</p>
      </div>

      <h2>Filter by Neighborhood:</h2>

      <div class="row">
        <div class="col">
          <span class="check"><input type="checkbox" class="neighborhoodcheckbox" name="Downtown"
              value="Downtown">Downtown</span>
          <span class="check"><input type="checkbox" class="neighborhoodcheckbox" name="Lawrenceville"
              value="Lawrenceville">Lawrenceville</span>
          <span class="check"><input type="checkbox" class="neighborhoodcheckbox" name="Oakland"
              value="Oakland">Oakland</span>
        </div>

        <div class="col">
          <span class="check"><input type="checkbox" class="neighborhoodcheckbox" name="South Side"
              value="South Side">South Side</span>
          <span class="check"><input type="checkbox" class="neighborhoodcheckbox" name="Squirrel Hill"
              value="Squirrel Hill">Squirrel Hill</span>
          <span class="check"><input type="checkbox" class="neighborhoodcheckbox" name="Strip District"
              value="Strip District">Strip District</span>
        </div>
      </div>

      <div class="filters">
        <h2>Filter by Category:</h2>

        <div class="row">
          <div class="col">
            <span class="check"><input type="checkbox" class="checkbox" name="active" value="active">Active
              &#128131;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="arts" value="arts">Art &#127912;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="bakeries" value="bakeries">Bakeries
              &#129360;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="cafes" value="cafes">Cafes
              &#129391;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="chinese" value="chinese">Chinese
              &#129377;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="coffee" value="coffee">Coffee
              &#9749;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="donuts" value="donuts">Donuts
              &#127849;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="ethnicmarkets"
                value="ethnicmarkets">Ethnic Markets &#127776;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="french" value="french">French
              &#129366;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="indpak" value="indpak">Ind-Pak
              &#127835;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="italian" value="italian">Italian
              &#127837;</span>
          </div>

          <div class="col">
            <span class="check"><input type="checkbox" class="checkbox" name="japanese" value="japanese">Japanese
              &#127836;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="mexican" value="mexican">Mexican
              &#129368;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="newamerican" value="newamerican">New
              American &#127828;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="nightlife" value="nightlife">Night Life
              &#127863;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="pizza" value="pizza">Pizza
              &#127829;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="restaurant" value="restaurant">Resturant
              &#129474;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="sandwiches" value="sandwiches">Sandwiches
              &#129386;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="shopping" value="shopping">Shopping
              &#128092;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="sushi" value="sushi">Sushi
              &#127843;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="thai" value="thai">Thai &#127834;</span>
            <span class="check"><input type="checkbox" class="checkbox" name="vietnamese" value="vietnamese">Vietnamese
              &#127857;</span>
          </div>
        </div>

        <button type="button" id="filterbutton" name="button">Filter!</button>
        <button type="button" id="clearbutton" name="button" class="clear">clear</button>

      </div>
    </div>
  </div>


  <script id="code">

    // define map & mini map dimensions
    const map = d3.select("svg g#map");
    const mapWidth = map.attr("width");
    const mapHeight = map.attr("height");
    const chartArea = map.append("g");
    const minim = d3.select("svg g#minim");
    const minimWidth = minim.attr("width");
    const minimHeight = minim.attr("height");
    const minimArea = minim.append("g").attr("opacity", 0.5);


    // appending mini map features, as shown in lecture
    map.append("defs").append("clipPath")
      .attr("id", "chartClip")
      .append("rect").attr("x", 0)
      .attr("y", 0)
      .attr("width", mapWidth)
      .attr("height", mapHeight);
    const menu = d3.select("#menu");
    map.attr("clip-path", "url(#chartClip)");
    minim.append("defs").append("clipPath")
      .attr("id", "minichartClip")
      .append("rect").attr("x", 0)
      .attr("y", 0)
      .attr("width", minimWidth)
      .attr("height", minimHeight);
    minim.attr("clip-path", "url(#minichartClip)");


    // data time woop woop
    const requestdata = async function () {

      // load yelp csv + pitt map
      const ydata = await d3.csv("yelp_pittsburgh.csv");
      const pdata = await d3.json("pittsburgh.json");

      // define interactive surface area
      chartArea.append("rect").attr("x", 0).attr("y", 0)
        .attr("width", mapWidth).attr("height", mapHeight)
        .attr("fill", "none")
        .style("pointer-events", "all");

      // map & mini map projections
      var pitt = topojson.feature(pdata, pdata.objects.Neighborhoods_);
      var pittproj = d3.geoMercator().fitSize([900, mapHeight], pitt);
      var pittpath = d3.geoPath().projection(pittproj);
      var pitt_mini = topojson.feature(pdata, pdata.objects.Neighborhoods_);
      var pittproj_mini = d3.geoMercator().fitSize([minimWidth, minimHeight], pitt_mini);
      var pittpath_mini = d3.geoPath().projection(pittproj_mini);

      // map & mini map restaurant long/lat
      ydata.forEach(d => { d.Position = pittproj([d.longitude, d.latitude]); });
      ydata.forEach(d => { d.mini_Position = pittproj_mini([d.longitude, d.latitude]); });

      // draw map & mini map projections
      chartArea.selectAll("path.neighborhood").data(pitt.features)
        .join("path")
        .attr("class", "neighborhood")
        .attr("d", pittpath);
      minimArea.selectAll("path.neighborhood").data(pitt.features)
        .join("path")
        .attr("class", "neighborhood")
        .attr("d", pittpath_mini);

      let brushGroup = minimArea.append("g").attr("class", "brush");

      // add restaurants
      function updatemap(data) {
        let circles = chartArea.selectAll("image").data(data)
          .join("image")
          .attr("xlink:href", "restaurant.png")
          .attr("x", d => d.Position[0])
          .attr("y", d => d.Position[1])
          .attr("height", 50)
          .attr("width", 50)
          .on("mouseenter", handlemouseenter)
          .on("mouseout", handlemouseout);


        function handlemouseenter() {
          let c = d3.select(this);
          c.attr("xlink:href", "restaurantblue.png");
          rectimg.attr("xlink:href", c.datum().image_url);

          txt.text(c.datum().name);
          txt2.text((c.datum().category).toUpperCase());
          if (c.datum().rating == 1) {
            txt3.text("★");
          } else if (c.datum().rating == 2) {
            txt3.text("★ ★");
          } else if (c.datum().rating == 3) {
            txt3.text("★ ★ ★");
          } else if (c.datum().rating == 3.5) {
            txt3.text("★ ★ ★ ½");
          } else if (c.datum().rating == 4) {
            txt3.text("★ ★ ★ ★");
          } else if (c.datum().rating == 4.5) {
            txt3.text("★ ★ ★ ★ ½");
          } else if (c.datum().rating == 5) {
            txt3.text("★ ★ ★ ★ ★");
          };

          tooltip.style("visibility", "visible")
            .attr("transform", "translate(" + (c.datum().Position[0] - 125) + ", " + (c.datum().Position[1] + 45) + ")");
        }

        function handlemouseout() {
          let c = d3.select(this);
          c.attr("xlink:href", "restaurant.png");
          tooltip.style("visibility", "hidden");
        }

        // adding tooltip
        let tooltip = chartArea.append("g")
          .attr("class", "tooltip")
          .attr("visibility", "hidden");
        let hover = tooltip.append("rect")
          .attr("fill", "#c84c1f")
          .attr("stroke", "#793e2b")
          .attr("rx", 8)
          .attr("width", 300)
          .attr("height", 100);
        let txt = tooltip.append("text")
          .attr("class", "txts")
          .attr("x", 300 / 2.0)
          .attr("y", 25)
          .attr("font-weight", "900")
          .attr("fill", "#ffffff")
          .attr("text-anchor", "middle")
          .attr("alignment-baseline", "central");
        let txt2 = tooltip.append("text")
          .attr("class", "txts")
          .attr("x", 300 / 2.0)
          .attr("y", 50)
          .attr("fill", "#ffffff")
          .attr("text-anchor", "middle")
          .attr("alignment-baseline", "central");
        let txt3 = tooltip.append("text")
          .attr("class", "txts")
          .attr("x", 300 / 2.0)
          .attr("y", 75)
          .attr("text-anchor", "middle")
          .attr("fill", "#ffc20a")
          .attr("alignment-baseline", "central");

        let rectimg = tooltip.append("image")
          .attr("x", 70)
          .attr("y", 40)
          .attr("width", 75)
          .attr("height", 45);

        // populate restaurants on mini map
        let circles_mini = minimArea.selectAll("circle").data(ydata)
          .join("circle")
          .attr("cx", d => d.mini_Position[0])
          .attr("cy", d => d.mini_Position[1])
          .attr("r", 2)
          .attr("fill", "#dd3939")
          .attr("opacity", 0.5);

        // zooming capabilities
        let zoomExtent = [[0, 0], [900, mapHeight]];
        let translateExtent = [[-100, -100], [1000, 1000]];
        var plotZoom = d3.zoom()
          .extent(zoomExtent)
          .translateExtent(translateExtent)
          .scaleExtent([1, 8])
          .on("zoom", plotZoomed);

        map.call(plotZoom);

        // adding brush
        let brush = d3.brush()
          .extent([[0, 0], [minimWidth, minimHeight]])
          .on("brush", brushed)
        brushGroup.call(brush)

        // zoom fxn, as per lecture
        function plotZoomed(event) {

          let transform = event.transform;
          chartArea.attr("transform", transform);

          function getcoords(x, y, transform) {
            var xn = (x - transform.x) / transform.k;
            var yn = (y - transform.y) / transform.k;
            return [xn, yn];
          }
          minimBounds = [pittproj_mini(
            pittproj.invert(getcoords(0, 0, event.transform))),
          pittproj_mini(pittproj.invert(getcoords(mapWidth, mapHeight, event.transform))
          )]

          circles.attr("width", 50 / transform.k);
          circles.attr("height", 50 / transform.k);
          x_translate = 125 / transform.k;
          y_translate = 46 / transform.k;

          hover.attr("width", 300 / transform.k)
            .attr("height", 100 / transform.k)
            .attr("rx", 8 / transform.k)
            .attr("transform", "translate(" + (125 - x_translate) + ", " + (-45 + y_translate) + ")");
          txt.attr("font-size", 14 / transform.k)
            .attr("x", 300 / 2.0 / transform.k)
            .attr("y", 25 / transform.k)
            .attr("transform", "translate(" + (125 - x_translate) + ", " + (-45 + y_translate) + ")");
          txt2.attr("font-size", 12 / transform.k)
            .attr("x", 300 / 2.0 / transform.k)
            .attr("y", 50 / transform.k)
            .attr("transform", "translate(" + (125 - x_translate) + ", " + (-45 + y_translate) + ")");
          txt3.attr("font-size", 14 / transform.k)
            .attr("x", 300 / 2.0 / transform.k)
            .attr("y", 75 / transform.k)
            .attr("transform", "translate(" + (125 - x_translate) + ", " + (-45 + y_translate) + ")");
          rectimg.attr("width", 75 / transform.k)
            .attr("height", 45 / transform.k)
            .attr("x", 70 / transform.k)
            .attr("y", 40 / transform.k)
            .attr("transform", "translate(" + (125 - x_translate) + ", " + (-45 + y_translate) + ")");

          brushGroup.call(brush.move, minimBounds)
        }

        function brushed({ sourceEvent, selection }) {
          // need to catch that infinite loop, define fxn as per lecture
          if (sourceEvent === undefined) {
            return;
          }
          let transform = d3.zoomTransform(chartArea.node());
          let upperleft = pittproj_mini.invert([selection[0][0], selection[0][1]])
          let lowerright = pittproj_mini.invert([selection[1][0], selection[1][1]])
          transform.x = selection[0][0] - (pittproj(upperleft)[0]) * transform.k;
          transform.y = selection[0][1] - (pittproj(upperleft)[1]) * transform.k;
          map.call(plotZoom.transform, transform);
        }
        map.call(plotZoom.transform, d3.zoomIdentity);
      }
      updatemap(ydata);


      // checkbox filtering
      d3.select("button").on("click", function () {
        var checked = [];
        var checked_nbhd = []
        var boxes = d3.selectAll("input.checkbox:checked");
        var boxes_nbhd = d3.selectAll("input.neighborhoodcheckbox:checked");
        boxes.each(function () {
          checked.push(this.value)
        });
        boxes_nbhd.each(function () {
          checked_nbhd.push(this.value)
        });
        newdata = ydata.filter((d) => {
          let pcf = false;
          let pnf = false;

          if (checked.length === 0) {
            pcf = true;
          } else {
            checked.forEach((category, i) => {
              pcf = pcf || d['category'] === category
            });
          }

          if (checked_nbhd.length === 0) {
            pnf = true;
          } else {
            checked_nbhd.forEach((neighborhood, i) => {
              pnf = pnf || d['neighborhood'] === neighborhood
            });
          }
          return pcf && pnf;
        })
        updatemap(newdata)
        updateminim(newdata)
      });

      //clear checkbox
      d3.select(".clear").on("click", function () {
        d3.selectAll('input').property('checked', false);
        d3.select("#menu").remove();
        updatemap(ydata)
        updateminim(ydata)
      });


      function updateminim(data) {
        var pitt_mini = topojson.feature(pdata, pdata.objects.Neighborhoods_);
        var pittproj_mini = d3.geoMercator().fitSize([minimWidth, minimHeight], pitt_mini);
        var pittpath_mini = d3.geoPath().projection(pittproj_mini);

        data.forEach(d => {
          d.mini_Position = pittproj_mini([d.longitude, d.latitude]);
        });

        let circles_mini = minimArea.selectAll("circle").data(data)
          .join("circle")
          .attr("r", 2)
          .attr("fill", "#fc6e61")
          .attr("opacity", 0.5)
          .attr("cx", d => d.mini_Position[0])
          .attr("cy", d => d.mini_Position[1]);
      };
    };
    requestdata();
  </script>
</body>

</html>